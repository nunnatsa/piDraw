<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>RPiDraw</title>
    <style>
        html {
            background: black
        }
        table, td, th {
            border: 1px solid white;
        }

        table {
            border-collapse: collapse;
        }

        td {
            width: 20px;
            height: 20px;
        }
    </style>
</head>
<body>
    
<table id="matrix">
</table>
<p>
<button id="reset" value="Reset">Reset</button>
</p>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script type="text/javascript">
    const socket = new WebSocket("ws://{{.}}:8080/api/canvas/");

    let elm

    socket.onmessage = function (e) {
        const data = JSON.parse(e.data)
        console.log(`Received new canvas: ${e.data}`)
        let mt = document.getElementById("matrix")
        while (mt.lastElementChild) {
            mt.removeChild(mt.lastElementChild);
        }

        for ( let i = 0; i < data.canvas.length; i++ ) {
            let line = data.canvas[i]
            let tr = document.createElement("tr")
            for (let j = 0; j < line.length; j++) {
                let cell = line[j]
                let td = document.createElement("td")
                td.id = getCelId(j, i)
                td.style.backgroundColor = "#" + cell.toString(16)
                tr.appendChild(td)
            }
            mt.appendChild(tr)
        }

        const cursorID = getCelId(data.cursor.x, data.cursor.y)
        const cursorElement = document.getElementById(cursorID)
        cursorElement.style.color = reverseColor(cursorElement.style.backgroundColor)
        cursorElement.innerText = 'X'
    };

    const reset = document.getElementById("reset")
    reset.onclick = function(e) {
        $.post("http://{{.}}:8080/api/canvas/reset", "reset")
    }

    function getCelId(x, y) {
        return `${x}`.padStart(2, '0') + '_' + `${y}`.padStart(2, '0')
    }

    function reverseColor(bg) {
        const rx = /rgb\((\d+), (\d+), (\d+)\)/
        let colors = bg.match(rx)
        if (!colors) {
            return 'rgb(255, 255, 255)'
        }

        const r = 255 - parseInt(colors[1])
        const g = 255 - parseInt(colors[1])
        const b = 255 - parseInt(colors[1])

        return `rgb(${r}, ${g}, ${b}`
    }
</script>
</body>
</html>
